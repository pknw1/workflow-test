global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000


frontend ks4.pknw1.co.uk
  bind 0.0.0.0:80
  mode http
  http-request redirect scheme https unless { ssl_fc }



frontend secure
  bind 192.99.13.66:443 ssl crt /etc/ssl/private/wildcard-pknw1.co.uk.pem crt /etc/ssl/private/wildcard-guiltykicks.pem

  ### capgture data from connections
  http-request capture req.hdr(Host) len 64
  http-request capture req.hdr(X-Forwarded-For) len 15
  http-request capture req.hdr(Referer) len 30
  http-request capture req.hdr(User-Agent) len 100
  http-request capture req.hdr(src) len 10
  http-request set-var(req.rewrite) req.hdr(host),lower,regsub(\.pknw1\.co\.uk$,) if { hdr_end(host) -i .pknw1.co.uk }
    http-response set-header Access-Control-Allow-Origin "*"
    http-response set-header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization, JSNLog-RequestId, activityId, applicationId, applicationUserId, channelId, senderId, sessionId"
    http-response set-header Access-Control-Max-Age 3628800
    http-response set-header Access-Control-Allow-Methods "GET, DELETE, OPTIONS, POST, PUT"


  log-format "%ci - %[capture.req.hdr(0)]%HU [Referer: %[capture.req.hdr(2)]] [Agent: %[capture.req.hdr(3)]] %ST"# %ac/%fc/%bc/%sc/%rc %sq/%bq "

  #### network based ACL

  acl 		sso 		hdr_beg(Host) -i sso.
  acl 		webmin 		hdr_beg(Host) -i webmin.
  acl 		has_cookie 	hdr_sub(cookie) PKnw1COOKIE
  acl		pk		src -f /etc/haproxy/pk.txt 
  acl		ssh		hdr_beg(Host) -i ssh.
  acl 		robots		path /robots.txt


#use_backend   docker-proxy-internal if { hdr_beg(Host) -i notflix. }
#  use_backend   response		if { hdr_beg(Host) -i response. }
#  use_backend 	sso 			if sso
#  use_backend 	webmin 			if webmin
#  use_backend 	docker-proxy-internal 	if trusted
#  use_backend	docker-proxy-internal	if uptimerobot
##  use_backend   docker-proxy-internal   if networks_allowed
#  use_backend 	docker-proxy-internal 	if !protected_sites
#  use_backend 	docker-proxy 		if protected_sites has_cookie
#default_backend docker-proxy



backend webmin
 acl           has_cookie      hdr_sub(cookie) PKnw1COOKIE 

#http-request redirect code 302 location https://sso.pknw1.co.uk/%[var(req.rewrite)] if secret 
  http-response replace-value Location (.*):.* \1
  server webmin 127.0.0.1:10000 verify none

backend vpn
  server vpn 172.18.0.1:943 ssl verify none

backend sso
  server docker-proxy 172.18.0.1:8088 check verify none

backend docker-proxy-internal
  http-request set-header Location hdr(Host)
  server docker-proxy 172.18.0.1:8088 check verify none

backend docker-proxy
  acl has_cookie hdr_sub(cookie) PKnw1COOKIE
  http-request redirect code 302 location https://sso.pknw1.co.uk/%[var(req.rewrite)] if !has_cookie

  server docker-proxy 172.18.0.1:8088 check verify none
